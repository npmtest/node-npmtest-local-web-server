{"/home/travis/build/npmtest/node-npmtest-local-web-server/test.js":"/* istanbul instrument in package npmtest_local_web_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-local-web-server/lib.npmtest_local_web_server.js":"/* istanbul instrument in package npmtest_local_web_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_local_web_server = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_local_web_server = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-local-web-server/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-local-web-server && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_local_web_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_local_web_server\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_local_web_server.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_local_web_server.rollup.js'] =\n            local.assetsDict['/assets.npmtest_local_web_server.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_local_web_server.__dirname + '/lib.npmtest_local_web_server.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-local-web-server/node_modules/local-web-server/lib/local-web-server.js":"'use strict'\nconst path = require('path')\nconst url = require('url')\nconst arrayify = require('array-back')\n\n/**\n * @module local-web-server\n */\nmodule.exports = localWebServer\n\n/**\n * Returns a Koa application you can launch or mix into an existing app.\n *\n * @param [options] {object} - options\n * @param [options.static] {object} - koa-static config\n * @param [options.static.root=.] {string} - root directory\n * @param [options.static.options] {string} - [options](https://github.com/koajs/static#options)\n * @param [options.serveIndex] {object} - koa-serve-index config\n * @param [options.serveIndex.path=.] {string} - root directory\n * @param [options.serveIndex.options] {string} - [options](https://github.com/expressjs/serve-index#options)\n * @param [options.forbid] {string[]} - A list of forbidden routes, each route being an [express route-path](http://expressjs.com/guide/routing.html#route-paths).\n * @param [options.spa] {string} - specify an SPA file to catch requests for everything but static assets.\n * @param [options.log] {object} - [morgan](https://github.com/expressjs/morgan) config\n * @param [options.log.format] {string} - [log format](https://github.com/expressjs/morgan#predefined-formats)\n * @param [options.log.options] {object} - [options](https://github.com/expressjs/morgan#options)\n * @param [options.compress] {boolean} - Serve gzip-compressed resources, where applicable\n * @param [options.mime] {object} - A list of mime-type overrides, passed directly to [mime.define()](https://github.com/broofa/node-mime#mimedefine)\n * @param [options.rewrite] {module:local-web-server~rewriteRule[]} - One or more rewrite rules\n * @param [options.verbose] {boolean} - Print detailed output, useful for debugging\n *\n * @alias module:local-web-server\n * @return {external:KoaApplication}\n * @example\n * const localWebServer = require('local-web-server')\n * localWebServer().listen(8000)\n */\nfunction localWebServer (options) {\n  options = Object.assign({\n    static: {},\n    serveIndex: {},\n    spa: null,\n    log: {},\n    compress: false,\n    mime: {},\n    forbid: [],\n    rewrite: [],\n    verbose: false,\n    mocks: []\n  }, options)\n\n  if (options.verbose) {\n    process.env.DEBUG = '*'\n  }\n\n  const log = options.log\n  log.options = log.options || {}\n\n  if (options.verbose && !log.format) {\n    log.format = 'none'\n  }\n\n  if (!options.static.root) options.static.root = process.cwd()\n  if (!options.serveIndex.path) options.serveIndex.path = process.cwd()\n  options.rewrite = arrayify(options.rewrite)\n  options.forbid = arrayify(options.forbid)\n  options.mocks = arrayify(options.mocks)\n\n  const debug = require('debug')('local-web-server')\n  const Koa = require('koa')\n  const convert = require('koa-convert')\n  const cors = require('kcors')\n  const _ = require('koa-route')\n  const json = require('koa-json')\n  const bodyParser = require('koa-bodyparser')\n  const mw = require('./middleware')\n\n  const app = new Koa()\n  const _use = app.use\n  app.use = x => _use.call(app, convert(x))\n\n  /* CORS: allow from any origin */\n  app.use(cors())\n\n  /* pretty print JSON */\n  app.use(json())\n\n  /* rewrite rules */\n  if (options.rewrite && options.rewrite.length) {\n    options.rewrite.forEach(route => {\n      if (route.to) {\n        /* `to` address is remote if the url specifies a host */\n        if (url.parse(route.to).host) {\n          debug('proxy rewrite', `${route.from} -> ${route.to}`)\n          app.use(_.all(route.from, mw.proxyRequest(route, app)))\n        } else {\n          const rewrite = require('koa-rewrite')\n          const rmw = rewrite(route.from, route.to)\n          rmw._name = 'rewrite'\n          app.use(rmw)\n        }\n      }\n    })\n  }\n\n  /* must come after rewrite. See https://github.com/nodejitsu/node-http-proxy/issues/180. */\n  app.use(bodyParser())\n\n  /* path blacklist */\n  if (options.forbid.length) {\n    debug('forbid', options.forbid.join(', '))\n    app.use(mw.blacklist(options.forbid))\n  }\n\n  /* cache */\n  if (!options['no-cache']) {\n    const conditional = require('koa-conditional-get')\n    const etag = require('koa-etag')\n    app.use(conditional())\n    app.use(etag())\n  }\n\n  /* mime-type overrides */\n  if (options.mime) {\n    debug('mime override', JSON.stringify(options.mime))\n    app.use(mw.mime(options.mime))\n  }\n\n  /* compress response */\n  if (options.compress) {\n    const compress = require('koa-compress')\n    debug('compression', 'enabled')\n    app.use(compress())\n  }\n\n  /* Logging */\n  if (log.format !== 'none') {\n    const morgan = require('koa-morgan')\n\n    if (!log.format) {\n      const streamLogStats = require('stream-log-stats')\n      log.options.stream = streamLogStats({ refreshRate: 500 })\n      app.use(morgan('common', log.options))\n    } else if (log.format === 'logstalgia') {\n      morgan.token('date', logstalgiaDate)\n      app.use(morgan('combined', log.options))\n    } else {\n      app.use(morgan(log.format, log.options))\n    }\n  }\n\n  /* Mock Responses */\n  options.mocks.forEach(mock => {\n    if (mock.module) {\n      mock.responses = require(path.resolve(path.join(options.static.root, mock.module)))\n    }\n\n    if (mock.responses) {\n      app.use(mw.mockResponses(mock.route, mock.responses))\n    } else if (mock.response) {\n      mock.target = {\n        request: mock.request,\n        response: mock.response\n      }\n      app.use(mw.mockResponses(mock.route, mock.target))\n    }\n  })\n\n  /* for any URL not matched by static (e.g. `/search`), serve the SPA */\n  if (options.spa) {\n    const historyApiFallback = require('koa-connect-history-api-fallback')\n    debug('SPA', options.spa)\n    app.use(historyApiFallback({\n      index: options.spa,\n      verbose: options.verbose\n    }))\n  }\n\n  /* serve static files */\n  if (options.static.root) {\n    const serve = require('koa-static')\n    app.use(serve(options.static.root, options.static.options))\n  }\n\n  /* serve directory index */\n  if (options.serveIndex.path) {\n    const serveIndex = require('koa-serve-index')\n    app.use(serveIndex(options.serveIndex.path, options.serveIndex.options))\n  }\n\n  return app\n}\n\nfunction logstalgiaDate () {\n  var d = new Date()\n  return (`${d.getDate()}/${d.getUTCMonth()}/${d.getFullYear()}:${d.toTimeString()}`).replace('GMT', '').replace(' (BST)', '')\n}\n\nprocess.on('unhandledRejection', (reason, p) => {\n  throw reason\n})\n\n/**\n * The `from` and `to` routes are specified using [express route-paths](http://expressjs.com/guide/routing.html#route-paths)\n *\n * @example\n * ```json\n * {\n *   \"rewrite\": [\n *     { \"from\": \"/css/*\", \"to\": \"/build/styles/$1\" },\n *     { \"from\": \"/npm/*\", \"to\": \"http://registry.npmjs.org/$1\" },\n *     { \"from\": \"/:user/repos/:name\", \"to\": \"https://api.github.com/repos/:user/:name\" }\n *   ]\n * }\n * ```\n *\n * @typedef rewriteRule\n * @property from {string} - request route\n * @property to {string} - target route\n */\n\n/**\n * @external KoaApplication\n * @see https://github.com/koajs/koa/blob/master/docs/api/index.md#application\n */\n","/home/travis/build/npmtest/node-npmtest-local-web-server/node_modules/local-web-server/lib/middleware.js":"'use strict'\nconst path = require('path')\nconst http = require('http')\nconst url = require('url')\nconst arrayify = require('array-back')\nconst t = require('typical')\nconst pathToRegexp = require('path-to-regexp')\nconst debug = require('debug')('local-web-server')\n\n/**\n * @module middleware\n */\nexports.proxyRequest = proxyRequest\nexports.blacklist = blacklist\nexports.mockResponses = mockResponses\nexports.mime = mime\n\nfunction proxyRequest (route) {\n  const httpProxy = require('http-proxy')\n  const proxy = httpProxy.createProxyServer({\n    changeOrigin: true,\n    secure: false\n  })\n  proxy.on('error', err => {\n    // not worth crashing for\n  })\n\n  return function proxyMiddleware () {\n    const keys = []\n    route.re = pathToRegexp(route.from, keys)\n    route.new = this.url.replace(route.re, route.to)\n\n    keys.forEach((key, index) => {\n      const re = RegExp(`:${key.name}`, 'g')\n      route.new = route.new\n        .replace(re, arguments[index + 1] || '')\n    })\n\n    debug('proxy request', `from: ${this.path}, to: ${url.parse(route.new).href}`)\n\n    return new Promise((resolve, reject) => {\n      proxy.once('error', err => {\n        err.message = `[PROXY] Error: ${err.message} Target: ${route.new}`\n        reject(err)\n      })\n      proxy.once('proxyReq', function (proxyReq) {\n        proxyReq.path = url.parse(route.new).path\n      })\n      proxy.once('close', resolve)\n      proxy.web(this.req, this.res, { target: route.new })\n    })\n  }\n}\n\nfunction blacklist (forbid) {\n  return function blacklist (ctx, next) {\n    if (forbid.some(expression => pathToRegexp(expression).test(ctx.path))) {\n      ctx.throw(403, http.STATUS_CODES[403])\n    } else {\n      return next()\n    }\n  }\n}\n\nfunction mime (mimeTypes) {\n  return function mime (ctx, next) {\n    return next().then(() => {\n      const reqPathExtension = path.extname(ctx.path).slice(1)\n      Object.keys(mimeTypes).forEach(mimeType => {\n        const extsToOverride = mimeTypes[mimeType]\n        if (extsToOverride.indexOf(reqPathExtension) > -1) ctx.type = mimeType\n      })\n    })\n  }\n}\n\nfunction mockResponses (route, targets) {\n  targets = arrayify(targets)\n  debug('mock route: %s, targets: %s', route, targets.length)\n  const pathRe = pathToRegexp(route)\n\n  return function mockResponse (ctx, next) {\n    if (pathRe.test(ctx.path)) {\n      const testValue = require('test-value')\n\n      /* find a mock with compatible method and accepts */\n      let target = targets.find(target => {\n        return testValue(target, {\n          request: {\n            method: [ ctx.method, undefined ],\n            accepts: type => ctx.accepts(type)\n          }\n        })\n      })\n\n      /* else take the first target without a request (no request means 'all requests') */\n      if (!target) {\n        target = targets.find(target => !target.request)\n      }\n\n      if (target) {\n        if (t.isFunction(target.response)) {\n          const pathMatches = ctx.path.match(pathRe).slice(1)\n          return target.response.apply(null, [ctx].concat(pathMatches))\n        } else if (t.isPlainObject(target.response)) {\n          Object.assign(ctx.response, target.response)\n        } else {\n          throw new Error(`Invalid response: ${JSON.stringify(target.response)}`)\n        }\n      }\n    } else {\n      return next()\n    }\n  }\n}\n"}